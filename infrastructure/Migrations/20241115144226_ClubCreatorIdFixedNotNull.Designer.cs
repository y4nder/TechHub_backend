// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using infrastructure;

#nullable disable

namespace infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241115144226_ClubCreatorIdFixedNotNull")]
    partial class ClubCreatorIdFixedNotNull
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.HasKey("TagId", "ArticleId")
                        .HasName("PK__ArticleT__A7A13C6086DD3216");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTag", (string)null);
                });

            modelBuilder.Entity("domain.entities.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArticleId"));

                    b.Property<int?>("ArticleAuthorId")
                        .HasColumnType("int")
                        .HasColumnName("article_author_id");

                    b.Property<string>("ArticleThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("articleThumbnailUrl");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDateTime");

                    b.Property<bool?>("IsDrafted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("isDrafted");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDateTime");

                    b.HasKey("ArticleId")
                        .HasName("PK__Article__75D3D37EA733C6CA");

                    b.HasIndex("ArticleAuthorId");

                    b.HasIndex("ClubId");

                    b.ToTable("Article", (string)null);
                });

            modelBuilder.Entity("domain.entities.ArticleBody", b =>
                {
                    b.Property<string>("ArticleContent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("articleContent");

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleBody", (string)null);
                });

            modelBuilder.Entity("domain.entities.Club", b =>
                {
                    b.Property<int>("ClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubId"));

                    b.Property<int?>("ClubCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("clubCategoryId");

                    b.Property<int>("ClubCreatorId")
                        .HasColumnType("int")
                        .HasColumnName("clubCreatorId");

                    b.Property<string>("ClubImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("clubImageUrl");

                    b.Property<string>("ClubIntroduction")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("clubIntroduction");

                    b.Property<string>("ClubName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("clubName");

                    b.Property<short?>("InvitePermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("invitePermission");

                    b.Property<short?>("PostPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("postPermission");

                    b.HasKey("ClubId")
                        .HasName("PK__Club__DF4AEAB285DE4451");

                    b.HasIndex("ClubCategoryId");

                    b.HasIndex("ClubCreatorId");

                    b.ToTable("Club", (string)null);
                });

            modelBuilder.Entity("domain.entities.ClubAdditionalInfo", b =>
                {
                    b.Property<DateTime?>("ClubCreatedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("clubCreatedDate");

                    b.Property<string>("ClubDescription")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("clubDescription");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.HasIndex("ClubId");

                    b.ToTable("ClubAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("domain.entities.ClubCategory", b =>
                {
                    b.Property<int>("ClubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("clubCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClubCategoryId"));

                    b.Property<string>("ClubCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("clubCategoryName");

                    b.HasKey("ClubCategoryId")
                        .HasName("PK__ClubCate__008AAC5D82704D6C");

                    b.ToTable("ClubCategory", (string)null);

                    b.HasData(
                        new
                        {
                            ClubCategoryId = 1,
                            ClubCategoryName = "Programming Languages"
                        },
                        new
                        {
                            ClubCategoryId = 2,
                            ClubCategoryName = "DevOps"
                        },
                        new
                        {
                            ClubCategoryId = 3,
                            ClubCategoryName = "Artificial Intelligence"
                        },
                        new
                        {
                            ClubCategoryId = 4,
                            ClubCategoryName = "Web Development"
                        },
                        new
                        {
                            ClubCategoryId = 5,
                            ClubCategoryName = "Mobile Development"
                        },
                        new
                        {
                            ClubCategoryId = 6,
                            ClubCategoryName = "Game Development"
                        },
                        new
                        {
                            ClubCategoryId = 7,
                            ClubCategoryName = "Data Science"
                        },
                        new
                        {
                            ClubCategoryId = 8,
                            ClubCategoryName = "Cybersecurity"
                        },
                        new
                        {
                            ClubCategoryId = 9,
                            ClubCategoryName = "Cloud Computing"
                        },
                        new
                        {
                            ClubCategoryId = 10,
                            ClubCategoryName = "Software Engineering"
                        });
                });

            modelBuilder.Entity("domain.entities.ClubUser", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("clubId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.HasKey("ClubId", "UserId")
                        .HasName("PK__ClubUser__33F34B7D37E4E2E3");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ClubUser", (string)null);
                });

            modelBuilder.Entity("domain.entities.ClubUserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId")
                        .HasName("PK__ClubUser__CD98462A79796A77");

                    b.ToTable("ClubUserRole", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Regular User"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Club Creator"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Moderator"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("domain.entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<int?>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<int?>("CommentCreatorId")
                        .HasColumnType("int")
                        .HasColumnName("commentCreatorId");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("createdDateTime");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int")
                        .HasColumnName("parentCommentId");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("updateDateTime");

                    b.HasKey("CommentId")
                        .HasName("PK__Comment__CDDE919D08B27851");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentCreatorId");

                    b.HasIndex("ParentCommentId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("domain.entities.SearchHistory", b =>
                {
                    b.Property<int>("SearchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("searchId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SearchId"));

                    b.Property<string>("SearchQuery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("searchQuery");

                    b.Property<DateTime?>("SearchedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("searchedDate");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("SearchId")
                        .HasName("PK__SearchHi__33FFD956DA1979CE");

                    b.HasIndex("UserId");

                    b.ToTable("SearchHistory", (string)null);
                });

            modelBuilder.Entity("domain.entities.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<int>("TagCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("tagCount");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tagName");

                    b.HasKey("TagId")
                        .HasName("PK__Tag__50FC01574E1148B3");

                    b.ToTable("Tag", (string)null);

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagCount = 0,
                            TagName = "C#"
                        },
                        new
                        {
                            TagId = 2,
                            TagCount = 0,
                            TagName = "Python"
                        },
                        new
                        {
                            TagId = 3,
                            TagCount = 0,
                            TagName = "JavaScript"
                        },
                        new
                        {
                            TagId = 4,
                            TagCount = 0,
                            TagName = "Java"
                        },
                        new
                        {
                            TagId = 5,
                            TagCount = 0,
                            TagName = "Ruby"
                        },
                        new
                        {
                            TagId = 6,
                            TagCount = 0,
                            TagName = "SQL"
                        },
                        new
                        {
                            TagId = 7,
                            TagCount = 0,
                            TagName = "C++"
                        },
                        new
                        {
                            TagId = 8,
                            TagCount = 0,
                            TagName = "TypeScript"
                        },
                        new
                        {
                            TagId = 9,
                            TagCount = 0,
                            TagName = "Go"
                        },
                        new
                        {
                            TagId = 10,
                            TagCount = 0,
                            TagName = "Kotlin"
                        },
                        new
                        {
                            TagId = 11,
                            TagCount = 0,
                            TagName = "Algorithms"
                        },
                        new
                        {
                            TagId = 12,
                            TagCount = 0,
                            TagName = "Data Structures"
                        },
                        new
                        {
                            TagId = 13,
                            TagCount = 0,
                            TagName = "Operating Systems"
                        },
                        new
                        {
                            TagId = 14,
                            TagCount = 0,
                            TagName = "Machine Learning"
                        },
                        new
                        {
                            TagId = 15,
                            TagCount = 0,
                            TagName = "Artificial Intelligence"
                        },
                        new
                        {
                            TagId = 16,
                            TagCount = 0,
                            TagName = "Networking"
                        },
                        new
                        {
                            TagId = 17,
                            TagCount = 0,
                            TagName = "Cybersecurity"
                        },
                        new
                        {
                            TagId = 18,
                            TagCount = 0,
                            TagName = "Databases"
                        },
                        new
                        {
                            TagId = 19,
                            TagCount = 0,
                            TagName = "Blockchain"
                        },
                        new
                        {
                            TagId = 20,
                            TagCount = 0,
                            TagName = "Cloud Computing"
                        });
                });

            modelBuilder.Entity("domain.entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(75)
                        .IsUnicode(false)
                        .HasColumnType("varchar(75)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("PK__User__CB9A1CFFAC1B85EF");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserAdditionalInfo", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<string>("Company")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("company");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("contactNumber");

                    b.Property<string>("GithubLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("githubLink");

                    b.Property<string>("Job")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("job");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("linkedInLink");

                    b.Property<string>("PersonalWebsiteLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("personalWebsiteLink");

                    b.Property<string>("RedditLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("redditLink");

                    b.Property<int>("ReputationPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("reputationPoints");

                    b.Property<string>("StackOverflowLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("stackOverflowLink");

                    b.Property<string>("ThreadsLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("threadsLink");

                    b.Property<string>("UserProfilePicUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("userProfilePicUrl");

                    b.Property<string>("XLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("xLink");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("youtubeLink");

                    b.HasKey("UserId")
                        .HasName("PK__UserAddi__CB9A1CFF5B46A646");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserArticleBookmark", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<DateTime?>("BookmarkDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("bookmarkDateTime");

                    b.HasKey("UserId", "ArticleId")
                        .HasName("PK__UserArti__3CC721C8EFBE2D73");

                    b.HasIndex("ArticleId");

                    b.ToTable("UserArticleBookmark", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserArticleRead", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<DateTime?>("ReadDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("readDateTime");

                    b.HasKey("UserId", "ArticleId")
                        .HasName("PK__User_Art__3CC721C8917506F8");

                    b.HasIndex("ArticleId");

                    b.ToTable("User_Article_Read", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserArticleVote", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int")
                        .HasColumnName("articleId");

                    b.Property<short?>("VoteType")
                        .HasColumnType("smallint")
                        .HasColumnName("voteType");

                    b.HasKey("UserId", "ArticleId")
                        .HasName("PK__UserArti__3CC721C8FD48DE06");

                    b.HasIndex("ArticleId");

                    b.ToTable("UserArticleVote", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserCommentVote", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    b.Property<short?>("VoteType")
                        .HasColumnType("smallint")
                        .HasColumnName("vote_type");

                    b.HasKey("UserId", "CommentId")
                        .HasName("PK__UserComm__0747F5E6E0933D82");

                    b.HasIndex("CommentId");

                    b.ToTable("UserCommentVote", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserFollow", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int")
                        .HasColumnName("followerId");

                    b.Property<int>("FollowingId")
                        .HasColumnType("int")
                        .HasColumnName("followingId");

                    b.Property<DateTime?>("FollowedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("followedDate");

                    b.HasKey("FollowerId", "FollowingId")
                        .HasName("PK__UserFoll__6FA3F10A4976AB2A");

                    b.HasIndex("FollowingId");

                    b.ToTable("UserFollow", (string)null);
                });

            modelBuilder.Entity("domain.entities.UserTagFollow", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("tagId");

                    b.Property<DateTime?>("FollowedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("followedDate");

                    b.HasKey("UserId", "TagId")
                        .HasName("PK__UserTagF__AE95DCEA718B7D70");

                    b.HasIndex("TagId");

                    b.ToTable("UserTagFollow", (string)null);
                });

            modelBuilder.Entity("ArticleTag", b =>
                {
                    b.HasOne("domain.entities.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK__ArticleTa__artic__76969D2E");

                    b.HasOne("domain.entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__ArticleTa__tagId__75A278F5");
                });

            modelBuilder.Entity("domain.entities.Article", b =>
                {
                    b.HasOne("domain.entities.User", "ArticleAuthor")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleAuthorId")
                        .HasConstraintName("FK__Article__article__6D0D32F4");

                    b.HasOne("domain.entities.Club", "Club")
                        .WithMany("Articles")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK__Article__clubId__6E01572D");

                    b.Navigation("ArticleAuthor");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("domain.entities.ArticleBody", b =>
                {
                    b.HasOne("domain.entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK__ArticleBo__artic__6EF57B66");

                    b.Navigation("Article");
                });

            modelBuilder.Entity("domain.entities.Club", b =>
                {
                    b.HasOne("domain.entities.ClubCategory", "ClubCategory")
                        .WithMany("Clubs")
                        .HasForeignKey("ClubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Club__clubCatego__6383C8BA");

                    b.HasOne("domain.entities.User", "ClubCreator")
                        .WithMany("Clubs")
                        .HasForeignKey("ClubCreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Club__clubCreato__628FA481");

                    b.Navigation("ClubCategory");

                    b.Navigation("ClubCreator");
                });

            modelBuilder.Entity("domain.entities.ClubAdditionalInfo", b =>
                {
                    b.HasOne("domain.entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK__ClubAddit__clubI__6754599E");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("domain.entities.ClubUser", b =>
                {
                    b.HasOne("domain.entities.Club", "Club")
                        .WithMany("ClubUsers")
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("FK__ClubUser__clubId__6477ECF3");

                    b.HasOne("domain.entities.ClubUserRole", "Role")
                        .WithMany("ClubUsers")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK__ClubUser__roleId__66603565");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("ClubUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__ClubUser__userId__656C112C");

                    b.Navigation("Club");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.Comment", b =>
                {
                    b.HasOne("domain.entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK__Comment__article__693CA210");

                    b.HasOne("domain.entities.User", "CommentCreator")
                        .WithMany("Comments")
                        .HasForeignKey("CommentCreatorId")
                        .HasConstraintName("FK__Comment__comment__68487DD7");

                    b.HasOne("domain.entities.Comment", "ParentComment")
                        .WithMany("InverseParentComment")
                        .HasForeignKey("ParentCommentId")
                        .HasConstraintName("FK__Comment__parentC__6A30C649");

                    b.Navigation("Article");

                    b.Navigation("CommentCreator");

                    b.Navigation("ParentComment");
                });

            modelBuilder.Entity("domain.entities.SearchHistory", b =>
                {
                    b.HasOne("domain.entities.User", "User")
                        .WithMany("SearchHistories")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__SearchHis__userI__619B8048");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserAdditionalInfo", b =>
                {
                    b.HasOne("domain.entities.User", "User")
                        .WithOne("UserAdditionalInfo")
                        .HasForeignKey("domain.entities.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserAddit__userI__5EBF139D");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserArticleBookmark", b =>
                {
                    b.HasOne("domain.entities.Article", "Article")
                        .WithMany("UserArticleBookmarks")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserArtic__artic__72C60C4A");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("UserArticleBookmarks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserArtic__userI__71D1E811");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserArticleRead", b =>
                {
                    b.HasOne("domain.entities.Article", "Article")
                        .WithMany("UserArticleReads")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Arti__artic__70DDC3D8");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("UserArticleReads")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__User_Arti__userI__6FE99F9F");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserArticleVote", b =>
                {
                    b.HasOne("domain.entities.Article", "Article")
                        .WithMany("UserArticleVotes")
                        .HasForeignKey("ArticleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserArtic__artic__74AE54BC");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("UserArticleVotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserArtic__userI__73BA3083");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserCommentVote", b =>
                {
                    b.HasOne("domain.entities.Comment", "Comment")
                        .WithMany("UserCommentVotes")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK__UserComme__comme__6C190EBB");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("UserCommentVotes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserComme__userI__6B24EA82");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.UserFollow", b =>
                {
                    b.HasOne("domain.entities.User", "Follower")
                        .WithMany("UserFollowFollowers")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__follo__5CD6CB2B");

                    b.HasOne("domain.entities.User", "Following")
                        .WithMany("UserFollowFollowings")
                        .HasForeignKey("FollowingId")
                        .IsRequired()
                        .HasConstraintName("FK__UserFollo__follo__5DCAEF64");

                    b.Navigation("Follower");

                    b.Navigation("Following");
                });

            modelBuilder.Entity("domain.entities.UserTagFollow", b =>
                {
                    b.HasOne("domain.entities.Tag", "Tag")
                        .WithMany("UserTagFollows")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK__UserTagFo__tagId__60A75C0F");

                    b.HasOne("domain.entities.User", "User")
                        .WithMany("UserTagFollows")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserTagFo__userI__5FB337D6");

                    b.Navigation("Tag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("domain.entities.Article", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserArticleBookmarks");

                    b.Navigation("UserArticleReads");

                    b.Navigation("UserArticleVotes");
                });

            modelBuilder.Entity("domain.entities.Club", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ClubUsers");
                });

            modelBuilder.Entity("domain.entities.ClubCategory", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("domain.entities.ClubUserRole", b =>
                {
                    b.Navigation("ClubUsers");
                });

            modelBuilder.Entity("domain.entities.Comment", b =>
                {
                    b.Navigation("InverseParentComment");

                    b.Navigation("UserCommentVotes");
                });

            modelBuilder.Entity("domain.entities.Tag", b =>
                {
                    b.Navigation("UserTagFollows");
                });

            modelBuilder.Entity("domain.entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("ClubUsers");

                    b.Navigation("Clubs");

                    b.Navigation("Comments");

                    b.Navigation("SearchHistories");

                    b.Navigation("UserAdditionalInfo");

                    b.Navigation("UserArticleBookmarks");

                    b.Navigation("UserArticleReads");

                    b.Navigation("UserArticleVotes");

                    b.Navigation("UserCommentVotes");

                    b.Navigation("UserFollowFollowers");

                    b.Navigation("UserFollowFollowings");

                    b.Navigation("UserTagFollows");
                });
#pragma warning restore 612, 618
        }
    }
}
